<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zgbfour.zgb.dao.OrderMapper">
  <resultMap id="BaseResultMap" type="cn.zgbfour.zgb.entity.Order">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="distribution_time" jdbcType="TIMESTAMP" property="distributionTime" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="store_id" jdbcType="INTEGER" property="storeId" />
    <result column="payable_amount" jdbcType="DECIMAL" property="payableAmount" />
    <result column="payment_amount" jdbcType="DECIMAL" property="paymentAmount" />
    <result column="area_id" jdbcType="INTEGER" property="areaId" />
    <result column="snapshot" jdbcType="VARCHAR" property="snapshot" />
    <result column="strategy_id" jdbcType="INTEGER" property="strategyId" />
    <result column="distribute_id" jdbcType="INTEGER" property="distributeId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_time, update_time, distribution_time, status, store_id, payable_amount, 
    payment_amount, area_id, snapshot, strategy_id, distribute_id
  </sql>
  <select id="selectByExample" parameterType="cn.zgbfour.zgb.entity.OrderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0">
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from order
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from order
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.zgbfour.zgb.entity.OrderExample">
    delete from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.zgbfour.zgb.entity.Order">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into order (create_time, update_time, distribution_time, 
      status, store_id, payable_amount, 
      payment_amount, area_id, snapshot, 
      strategy_id, distribute_id)
    values (#{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{distributionTime,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER}, #{payableAmount,jdbcType=DECIMAL}, 
      #{paymentAmount,jdbcType=DECIMAL}, #{areaId,jdbcType=INTEGER}, #{snapshot,jdbcType=VARCHAR}, 
      #{strategyId,jdbcType=INTEGER}, #{distributeId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.zgbfour.zgb.entity.Order">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="distributionTime != null">
        distribution_time,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="storeId != null">
        store_id,
      </if>
      <if test="payableAmount != null">
        payable_amount,
      </if>
      <if test="paymentAmount != null">
        payment_amount,
      </if>
      <if test="areaId != null">
        area_id,
      </if>
      <if test="snapshot != null">
        snapshot,
      </if>
      <if test="strategyId != null">
        strategy_id,
      </if>
      <if test="distributeId != null">
        distribute_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="distributionTime != null">
        #{distributionTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="storeId != null">
        #{storeId,jdbcType=INTEGER},
      </if>
      <if test="payableAmount != null">
        #{payableAmount,jdbcType=DECIMAL},
      </if>
      <if test="paymentAmount != null">
        #{paymentAmount,jdbcType=DECIMAL},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=INTEGER},
      </if>
      <if test="snapshot != null">
        #{snapshot,jdbcType=VARCHAR},
      </if>
      <if test="strategyId != null">
        #{strategyId,jdbcType=INTEGER},
      </if>
      <if test="distributeId != null">
        #{distributeId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.zgbfour.zgb.entity.OrderExample" resultType="java.lang.Long">
    select count(*) from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update order
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.distributionTime != null">
        distribution_time = #{record.distributionTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.storeId != null">
        store_id = #{record.storeId,jdbcType=INTEGER},
      </if>
      <if test="record.payableAmount != null">
        payable_amount = #{record.payableAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.paymentAmount != null">
        payment_amount = #{record.paymentAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.areaId != null">
        area_id = #{record.areaId,jdbcType=INTEGER},
      </if>
      <if test="record.snapshot != null">
        snapshot = #{record.snapshot,jdbcType=VARCHAR},
      </if>
      <if test="record.strategyId != null">
        strategy_id = #{record.strategyId,jdbcType=INTEGER},
      </if>
      <if test="record.distributeId != null">
        distribute_id = #{record.distributeId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update order
    set id = #{record.id,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      distribution_time = #{record.distributionTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=INTEGER},
      store_id = #{record.storeId,jdbcType=INTEGER},
      payable_amount = #{record.payableAmount,jdbcType=DECIMAL},
      payment_amount = #{record.paymentAmount,jdbcType=DECIMAL},
      area_id = #{record.areaId,jdbcType=INTEGER},
      snapshot = #{record.snapshot,jdbcType=VARCHAR},
      strategy_id = #{record.strategyId,jdbcType=INTEGER},
      distribute_id = #{record.distributeId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.zgbfour.zgb.entity.Order">
    update order
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="distributionTime != null">
        distribution_time = #{distributionTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="storeId != null">
        store_id = #{storeId,jdbcType=INTEGER},
      </if>
      <if test="payableAmount != null">
        payable_amount = #{payableAmount,jdbcType=DECIMAL},
      </if>
      <if test="paymentAmount != null">
        payment_amount = #{paymentAmount,jdbcType=DECIMAL},
      </if>
      <if test="areaId != null">
        area_id = #{areaId,jdbcType=INTEGER},
      </if>
      <if test="snapshot != null">
        snapshot = #{snapshot,jdbcType=VARCHAR},
      </if>
      <if test="strategyId != null">
        strategy_id = #{strategyId,jdbcType=INTEGER},
      </if>
      <if test="distributeId != null">
        distribute_id = #{distributeId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.zgbfour.zgb.entity.Order">
    update order
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      distribution_time = #{distributionTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER},
      store_id = #{storeId,jdbcType=INTEGER},
      payable_amount = #{payableAmount,jdbcType=DECIMAL},
      payment_amount = #{paymentAmount,jdbcType=DECIMAL},
      area_id = #{areaId,jdbcType=INTEGER},
      snapshot = #{snapshot,jdbcType=VARCHAR},
      strategy_id = #{strategyId,jdbcType=INTEGER},
      distribute_id = #{distributeId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectForUpdate" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from order
    where id = #{id,jdbcType=INTEGER} for update
  </select>
</mapper>